#!/bin/bash

# Usage:
#   snap              # run 'gitk --all' for snaps
#   snap X            # erase all snap-related directories
#   snap -            # snap stdin
#   snap pbpaste      # snap pbpaste
#   snap file         # snap file
#   snap handle file  # snap file as handle for easy comparison

# Development variables:
#   export GIT_DIR=$(pwd)/.snap.git
#   export GIT_WORK_TREE=$(pwd)

function abspath() {
  cd -P -- "$(dirname -- "$1")" &&
  echo "$(pwd -P)/$(basename -- "$1")"
}

function git_add() {
  git add "$1"
}

function git_commit() {
  git commit --allow-empty -m "$1"
}

export GIT_DIR=$HOME/.snap.git
export GIT_WORK_TREE=$HOME
export SNAP_DIR=$HOME/.snap.dir

if [[ $# == 1 && $1 == X ]] ; then
  echo rm -rf "$GIT_DIR" "$SNAP_DIR"
       rm -rf "$GIT_DIR" "$SNAP_DIR"
  exit 0
fi

if [[ ! -d $GIT_DIR ]] ; then
  git init
fi

if [[ ! -d $SNAP_DIR ]] ; then
  mkdir "$SNAP_DIR"
fi

if [[ $# == 0 ]] ; then
  gitk --all &
  exit 0
elif [[ $# == 1 && $1 == - ]] ; then
  file=$SNAP_DIR/stdin
  cat > "$file"

  git_add "$file"
  git_commit stdin
elif [[ $# == 1 && $1 == pbpaste ]] ; then
  file=$SNAP_DIR/pbpaste
  pbpaste > "$file"

  git_add "$file"
  git_commit pbpaste
elif [[ $# == 1 ]] ; then
  file=$(abspath "$1")

  git_add "$file"
  git_commit "$file"
elif [[ $# == 2 ]] ; then
  handle=$1
  file=$(abspath "$2")
  snapfile=$SNAP_DIR/$handle

  cp "$file" "$snapfile"

  git_add "$snapfile"
  git_commit "$handle : $file"
fi

