#!/bin/bash

<<"DEVELOPMENT_VARIABLES"  # multiline comment, keep on top for 'head snap'
export GIT_DIR=$(pwd)/.snap.git ; export GIT_WORK_TREE=$(pwd)
DEVELOPMENT_VARIABLES

# http://serverfault.com/a/72511 Clean way to write complex multi-line string to a variable
read -d '' usage <<"END_OF_USAGE"
Usage:
  snap                # run 'gitk --all' for snaps
  snap -h|--help      # show usage (this text)
  snap X              # erase all snap-related directories
  snap -              # snap stdin
  snap pbpaste        # snap pbpaste (OSX only)
  snap <file>         # snap <file>
  snap <name> <file>  # snap <file> as <name> for easy comparison
END_OF_USAGE


function abspath() {
  cd -P -- "$(dirname -- "$1")" &&
  echo "$(pwd -P)/$(basename -- "$1")"
}

function git_add() {
  git add "$1"
}

function git_commit() {
  git commit --allow-empty -m "$1"
}


# Snap-related directories:
export GIT_DIR=$HOME/.snap.git
export SNAP_DIR=$HOME/.snap.dir

# Allow adding files from any place:
export GIT_WORK_TREE=/


# Parameters that do not require the snap-related directories:

if [[ $# == 1 ]] ; then
  case $1 in
  -h|--h*)
    # show usage
    echo "$usage"
    exit 0
    ;;
  X)
    # erase all snap-related directories
    echo rm -rf "$GIT_DIR" "$SNAP_DIR"
         rm -rf "$GIT_DIR" "$SNAP_DIR"
    exit 0
    ;;
  esac
fi


# All remaining parameters require the snap-related directories to exist, so they are
# created here:

if [[ ! -d $GIT_DIR ]] ; then
  git init
fi

if [[ ! -d $SNAP_DIR ]] ; then
  mkdir "$SNAP_DIR"
fi


# Parameters that require the snap-related directories:

case $# in
0)
  # run 'gitk --all' for snaps
  gitk --all &
  exit 0
  ;;
1)
  case $1 in
  -)
    # snap stdin
    file=$SNAP_DIR/stdin
    cat > "$file"

    git_add "$file"
    git_commit stdin
    ;;
  pbpaste)
    # snap pbpaste (OSX only)
    file=$SNAP_DIR/pbpaste
    pbpaste > "$file"

    git_add "$file"
    git_commit pbpaste
    ;;
  *)
    # snap <file>
    file=$(abspath "$1")

    git_add "$file"
    git_commit "$file"
    ;;
  esac
  ;;
2)
  # snap <file> as <name> for easy comparison
  handle=$1
  file=$(abspath "$2")
  snapfile=$SNAP_DIR/$handle

  cp "$file" "$snapfile"

  git_add "$snapfile"
  git_commit "$handle : $file"
  ;;
esac
